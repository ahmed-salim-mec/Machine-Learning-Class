# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19CiwX3HwvDXMQsgDiJyUfCA_jQ6JWKZv
"""

import pandas as pd
import numpy as np
import seaborn as sns
import warnings
warnings.filterwarnings('ignore')

from sklearn.preprocessing import LabelEncoder
from sklearn.preprocessing import StandardScaler
from sklearn.preprocessing import PolynomialFeatures
from sklearn.model_selection import train_test_split

from sklearn.tree import DecisionTreeClassifier
from sklearn.tree import DecisionTreeRegressor
from sklearn.decomposition import PCA
from sklearn.model_selection import RandomizedSearchCV
from sklearn.metrics import make_scorer
from sklearn.metrics import fbeta_score
from sklearn.metrics import accuracy_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn import metrics
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report

from sklearn.preprocessing import OrdinalEncoder

df = pd.read_csv('adult.csv')

sns.heatmap(df.isnull())

cat_df=df.select_dtypes('object')
cat_df.head()

arr1=[]
for item in cat_df['workclass']:
    if (item == '?'):
        arr1.append(item)
print('Length of missing vals in workclass column:')
print(len(arr1))
print('\n')
arr2=[]
for item in cat_df['occupation']:
    if (item == '?'):
        arr2.append(item)
print('Length of missing vals in occupation column:')
print(len(arr2))

null_data=((2809+2799)/(48842-(2809+2799)))*100
print(null_data)

x=df.select_dtypes(object)

oe=OrdinalEncoder()
cat_df=oe.fit_transform(cat_df)

cat_df

cat_df1=pd.DataFrame(data=cat_df,columns=x.columns)
cat_df1

num_df1=df.select_dtypes(int)
num_df1

final_df=pd.concat([num_df1,cat_df1],axis=1)
final_df

X=final_df.drop('income',axis=1)
y=final_df['income']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.3,random_state=50)

tree=DecisionTreeRegressor(max_depth=7)

tree.fit(X_train,y_train)

predictions=tree.predict(X_test)
print(predictions)

pred2=pd.DataFrame(data=predictions,columns=['predictions'])
pred2['predictions']

def num(n):
    if(n < 0.5):
        return 0
    else:
        return 1

x=pred2['predictions'].apply(num)
x.unique()

result2=classification_report(x,y_test)
print(result2)

cm = confusion_matrix(x, y_test)
cm